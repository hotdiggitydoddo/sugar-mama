var nodemailer = require("nodemailer");

function mapReplace(str, map) {
    var regex = [];
    for (var key in map)
        regex.push(key.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"));
    return str.replace(new RegExp(regex.join('|'), "g"), function (word) {
        return map[word];
    });
};

function normalizeMail(mail) {
    if (mail.to != null && (mail.subject || mail.text || mail.html) != null) {
        var newMail = {};

        for (var key in mail)
            if (key != "to")
                newMail[key] = mail[key];

        if (typeof (mail.to) != "string") {
            if (mail.to[0] != null) {
                if (typeof (mail.to[0]) == "string") {
                    newMail.to = mail.to.join(", ");
                } else {

                    var mailArray = [];
                    for (var i = 0; i < mail.to.length; i++) {
                        var conf = mail.to[i];
                        var aMail = {
                            to: conf.email
                        };

                        var map = {};
                        for (var key in conf) {
                            if (key != "email")
                                map["%" + key] = conf[key];
                        }

                        for (var key in newMail)
                            if (key != "to")
                                aMail[key] = mapReplace(newMail[key], map);

                        mailArray.push(aMail);

                    }

                    return mailArray;
                }
            } else
                return null;
        } else
            newMail.to = mail.to;

        return newMail;
    } else
        return null;
}


function newBot(protocol, service) {

    var Bot = {};

    Bot._smtpTransport = nodemailer.createTransport(protocol, service);

    Bot.kill = function () {
        Bot._smtpTransport.close();
    };

    Bot.send = function (mail, callback, count) {

        if (count == undefined || count == 0) {
            // Normalize
            mail = normalizeMail(mail);
            count = 0;
        }

        // Send
        if (mail != null) {
            if (mail.length > 0) {
                if (count < mail.length) {
                    Bot._smtpTransport.sendMail(mail[count], function (error, response) {

                        count++;

                        if (count >= mail.length) {
                            if (error)
                                callback(error, null);
                            else
                                callback(null, response);
                        } else
                            setImmediate(Bot.send, mail, callback, count);
                    });
                } else
                    callback("How can this be called?!", null);
            } else {
                Bot._smtpTransport.sendMail(mail, function (error, response) {
                    if (error)
                        callback(error, null);
                    else
                        callback(null, response);
                });
            }
        } else {
            callback("Invalid Mail", null);
        }
    };

    return Bot;
}

exports.newBot = newBot;